<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zzxzzxzzx123.github.io/zhang3.github.io/</id>
    <title>张卓欣的学习记录</title>
    <updated>2021-03-23T14:13:18.577Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zzxzzxzzx123.github.io/zhang3.github.io/"/>
    <link rel="self" href="https://zzxzzxzzx123.github.io/zhang3.github.io/atom.xml"/>
    <subtitle>学习使我快乐</subtitle>
    <logo>https://zzxzzxzzx123.github.io/zhang3.github.io/images/avatar.png</logo>
    <icon>https://zzxzzxzzx123.github.io/zhang3.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 张卓欣的学习记录</rights>
    <entry>
        <title type="html"><![CDATA[微信小程序入门概述]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/wei-xin-xiao-cheng-xu-ru-men-gai-shu/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/wei-xin-xiao-cheng-xu-ru-men-gai-shu/">
        </link>
        <updated>2021-03-23T14:11:02.000Z</updated>
        <summary type="html"><![CDATA[<p>小程序特点概述</p>
<p>1.没有DOM</p>
<p>2.组件化开发：具备特定功能效果的代码集合</p>
<p>3.体积小，单个压缩包体积不能大于2M，否则无法上线</p>
<p>4.小程序的四个重要的文件</p>
<p>​    a）*.js</p>
<p>​    b）*.wxml   view结构   html</p>
<p>​    c）*.wxss     view样式   css</p>
<p>​    d）*.json     view数据   json文件</p>
<p>5.小程序特有的适配方案//小程序虽然以html5为基础，但是使用中仍有差异</p>
<p>​    a）小程序适配单位：rpx</p>
<p>​    b）规定任何屏幕下宽度为750rpx</p>
<p>​    c）小程序会根据屏幕的宽度不同自动计算rpx值的大小</p>
<p>6.小程序API</p>
<p>​    a）小程序全局对象是：wx</p>
<p>​    b）所有的API都保存在wx对象中</p>
<p>7.快速查找技巧</p>
<p>a）当在小程序中想要实现某一种布局，查看组件</p>
<p>b）当在小程序中想要实现某一种功能，查看API</p>
<p>c）当在小程序中想要实现某一个配置或者某一种页面语法，查看框架+指南</p>
<p>微信官方文档</p>
]]></summary>
        <content type="html"><![CDATA[<p>小程序特点概述</p>
<p>1.没有DOM</p>
<p>2.组件化开发：具备特定功能效果的代码集合</p>
<p>3.体积小，单个压缩包体积不能大于2M，否则无法上线</p>
<p>4.小程序的四个重要的文件</p>
<p>​    a）*.js</p>
<p>​    b）*.wxml   view结构   html</p>
<p>​    c）*.wxss     view样式   css</p>
<p>​    d）*.json     view数据   json文件</p>
<p>5.小程序特有的适配方案//小程序虽然以html5为基础，但是使用中仍有差异</p>
<p>​    a）小程序适配单位：rpx</p>
<p>​    b）规定任何屏幕下宽度为750rpx</p>
<p>​    c）小程序会根据屏幕的宽度不同自动计算rpx值的大小</p>
<p>6.小程序API</p>
<p>​    a）小程序全局对象是：wx</p>
<p>​    b）所有的API都保存在wx对象中</p>
<p>7.快速查找技巧</p>
<p>a）当在小程序中想要实现某一种布局，查看组件</p>
<p>b）当在小程序中想要实现某一种功能，查看API</p>
<p>c）当在小程序中想要实现某一个配置或者某一种页面语法，查看框架+指南</p>
<p>微信官方文档</p>
<!-- more -->
<p>https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html</p>
<p>8.常用API</p>
<p>界面交互：</p>
<p>显示消息提示框：wx.showToast（）<br>
显示消息加载框：wx.showLoading（）<br>
关闭消息提示框：wx.hideToast（）<br>
关闭消息加载框：wx.hideLoading（）</p>
<p>路由跳转</p>
<p>wx.navigateTo（）<br>
wx.redirectTo（）<br>
wx.switchTab（）</p>
<p>网络请求</p>
<p>wx.request（）</p>
<p>本地存储</p>
<p>wx.setStorage（）<br>
wx.setStorageSync（）<br>
wx.getStorage（）<br>
wx.getStorageSync（）</p>
<p>媒体</p>
<p>wx.getBackgroundAudioManager（）<br>
wx.playVoice（）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线程和进程的区别]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/xian-cheng-he-jin-cheng-de-qu-bie/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/xian-cheng-he-jin-cheng-de-qu-bie/">
        </link>
        <updated>2021-03-20T09:20:51.000Z</updated>
        <content type="html"><![CDATA[<p>什么是进程和线程？😵<br>
进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。</p>
<p>线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</p>
<p>一个程序至少一个进程，一个进程至少一个线程。</p>
<p>为什么会有线程？</p>
<p>每个进程都有自己的地址空间，即进程空间，在网络或多用户换机下，一个服务器通常需要接收大量不确定数量用户的并发请求，为每一个请求都创建一个进程显然行不通（系统开销大响应用户请求效率低），因此操作系统中线程概念被引进。</p>
<p>线程的执行过程是线性的，尽管中间会发生中断或者暂停，但是进程所拥有的资源只为改线状执行过程服务，一旦发生线程切换，这些资源需要被保护起来。<br>
进程分为单线程进程和多线程进程，单线程进程宏观来看也是线性执行过程，微观上只有单一的执行过程。多线程进程宏观是线性的，微观上多个执行操作。<br>
线程的改变只代表CPU的执行过程的改变，而没有发生进程所拥有的资源的变化。</p>
<p></p>
<p>线程和进程各自有什么区别和优劣呢？<br>
进程是资源分配的最小单位，线程是程序执行的最小单位。</p>
<p>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</p>
<p>线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。</p>
<p>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</p>
<p>何时使用多进程，何时使用多线程？</p>
<p>对资源的管理和保护要求高，不限制开销和效率时，使用多进程。</p>
<p>要求效率高，频繁切换时，资源的保护管理要求不是很高时，使用多线程。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何应对高并发]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/ru-he-ying-dui-gao-bing-fa/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/ru-he-ying-dui-gao-bing-fa/">
        </link>
        <updated>2021-03-20T08:59:00.000Z</updated>
        <content type="html"><![CDATA[<p>高并发?</p>
<p>高并发是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。</p>
<p>高并发相关常用的一些指标有响应时间（Response Time），吞吐量（Throughput），每秒查询率QPS（Query Per Second），并发用户数等。</p>
<p>响应时间：系统对请求做出响应的时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间。</p>
<p>吞吐量：单位时间内处理的请求数量。</p>
<p>QPS：每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。</p>
<p>并发用户数：同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。</p>
<p>处理高并发问题的常见方法有如下几种:</p>
<ol>
<li>使用静态页面<br>
尽量将可以使用静态页面的地方使用静态页面，减少页面的解析时间，能够缓解服务器压力并降低数据库数据的频繁交换。<br>
实现静态页面的方法由很多：</li>
</ol>
<p>freemarker<br>
Thymeleaf<br>
2.缓存方面<br>
将一些有时效性或经常访问的数据存储在专门用于缓存的应用程序中，减少数据库的访问压力。常见的缓存技术有：</p>
<p>本地缓存：Cache</p>
<p>分布式缓存：Redis</p>
<ol start="3">
<li>优化数据库方面(对于一个优秀的应用，sql优化是必须做的)</li>
</ol>
<p>优化数据库查询语句，复杂的SQL语句不要使用ORM框架自动生成而是手动编写，同时优化数据库的表结构，如加入索引等.<br>
数据库读写分离，主数据库服务器负责写，从数据库服务器负责读，通过主从复制来保证数据的完整性。<br>
分表分区<br>
对数据库服务器进行硬件升级<br>
表的设计要符合三大范式<br>
添加适当的存储过程,触发器和事务等.</p>
<p>4.负载均衡<br>
我们知道可以通过集群以支持高并发和大数据量，而集群之间的分工就需要依靠负载均衡技术。<br>
负载均衡是指将请求划分给多个操作单元也就是分开部署的服务器上，即将收到请求按照一定规则分发给其它专门处理的处理服务器进行处理</p>
<p>5.动静分离<br>
一般有两种：</p>
<p>图片服务器分离：因为请求访问服务器上的图片资源是非常耗费服务器资源的，所以我们可以单独部署图片服务器，将压力转移并分担风险。<br>
将静态资源全部存放在 CDN 服务器上或者 nginx 服务器上，提高用户访问静态代码的速度，降低对后台应用访问。<br>
CDN：能实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等信息将请求重新导向离用户最近的服务节点上。<br>
nginx：高性能的HTTP服务器和反向代理服务器</p>
<p>6.多用异步请求，少用同步请求。（需要返回结果执行下一步的必须使用同步请求）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP与HTTPS的区别以及如何实现安全性]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/http-yu-https-de-qu-bie-yi-ji-ru-he-shi-xian-an-quan-xing/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/http-yu-https-de-qu-bie-yi-ji-ru-he-shi-xian-an-quan-xing/">
        </link>
        <updated>2021-03-20T08:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>http协议传输的数据都是未加密的，也就是明文的，因此使用http协议传输隐私信息非常不安全。为了保证这些隐私数据能加密传输，于是网景公司设计了ssl(Secure Sockets Layer)协议用于对http协议传输的数据进行加密，从而就诞生了https。<br>
简单来说，https协议是由ssl+http协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。<br>
<img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1616230227669.png" alt="" loading="lazy"></p>
<p>1.Url开头：HTTP 的 URL 以 HTTP:// 开头，而 HTTPS 的 URL 以 HTTPs:// 开头；</p>
<p>2.安全性：HTTP 是不安全的，而 HTTPS 是安全的。HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。</p>
<p>3.传输效率：传输效率上 HTTP 要高于 HTTPS ，因为http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</p>
<p>4.费用：HTTP 无需证书，而 HTTPS 必需要认证证书；相比于 HTTP 不需要证书来说，使用 HTTPS 需要证书，申请证书是要费用的，HTTPS 这笔费用是无法避免的</p>
<p>5.端口：HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>
<p>6.防劫持性：HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github网站无法进入如何解决]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/github-wang-zhan-wu-fa-jin-ru/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/github-wang-zhan-wu-fa-jin-ru/">
        </link>
        <updated>2021-03-20T08:08:52.000Z</updated>
        <content type="html"><![CDATA[<p>相信大家都不时会进入不了github官方网站，这是因为github网站在我们国家被“墙”了。</p>
<p>今天在这里介绍一个github项目，我们可以通过gitee打开<br>
https://gitee.com/docmirror/dev-sidecar</p>
<p>dev-sidecar<br>
开发者边车，命名取自service-mesh的service-sidecar，意为为开发者打辅助的边车工具<br>
通过本地代理的方式将http请求代理到一些国内的加速通道上<br>
不用ｆａｎ qiang也能解决一些网站和库无法访问或访问速度慢的问题</p>
<p>star GitHub stars</p>
<p>特性<br>
1、 dns优选<br>
根据网络状况智能解析最佳域名ip地址，获取最佳网络速度</p>
<p>建议遇到打开比较慢的国外网站，可以优先尝试将该域名添加到dns设置中（注意：被GFW封杀的无效）</p>
<p>2、 请求拦截<br>
拦截打不开的网站，代理到加速镜像站点上去。<br>
可配置多个镜像站作为备份<br>
具备测速机制，当访问失败或超时之后，自动切换到备用站点。<br>
使得目标服务高可用</p>
<p>3、 github加速<br>
release、source、zip下载加速<br>
clone 加速<br>
头像加速<br>
解决readme中图片引用无法加载的问题<br>
gist.github.com 加速<br>
解决git push 偶尔失败需要输入账号密码的问题（fatal: TaskCanceledException encountered / fatal: HttpRequestException encountered）<br>
raw/blame加速</p>
<p>4、 Stack Overflow 加速<br>
将ajax.google.com代理到加速CDN上<br>
recaptcha 图片验证码加速</p>
<p>5、 npm加速<br>
支持开启npm代理<br>
官方与淘宝npm registry一键切换,<br>
某些npm install的时候，并且使用cnpm也无法安装时，可以尝试开启npm代理再试</p>
<p>6、 增强功能<br>
众所周知的原因，不能在这里展示太多，自己下载来安装看看吧<br>
反正用了这个之后，上面那些dns优选什么的特性好像都不香了<br>
快速开始<br>
支持windows、Mac</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创建GitHub博客主页(仓库主页)绑定域名问题There isn't a GitHub Pages site here]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/chuang-jian-github-bo-ke-zhu-ye-cang-ku-zhu-ye-bang-ding-yu-ming-wen-ti-there-isnt-a-github-pages-site-here/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/chuang-jian-github-bo-ke-zhu-ye-cang-ku-zhu-ye-bang-ding-yu-ming-wen-ti-there-isnt-a-github-pages-site-here/">
        </link>
        <updated>2021-03-20T07:48:13.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1616227027502.png" alt="" loading="lazy"></figure>
<p>​	出现这个404 的错误，一般表示你的域名已经能够解析到了XXX.github.io，但是你的github还需要进一步配置。</p>
<p>​    首先，我们需要先进入到你的项目中去：</p>
<figure data-type="image" tabindex="2"><img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1616227040021.png" alt="" loading="lazy"></figure>
<p>点击settings进行我们的仓库配置，之后找到GitHubPages进行页面的配置：</p>
<p><img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1616227050732.png" alt="" loading="lazy"><br>
点击Your site is  published at右边的蓝色网址就是博客所在的主页啦😄</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Implicit super constructor Object() is undefined for default constructor报错]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/implicit-super-constructor-object-is-undefined-for-default-constructor-bao-cuo/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/implicit-super-constructor-object-is-undefined-for-default-constructor-bao-cuo/">
        </link>
        <updated>2021-03-18T08:02:53.000Z</updated>
        <content type="html"><![CDATA[<p>今天我在git clone一个已经完成的作业导入eclipse时发现编译器报错。控制台显示Implicit super constructor Object() is undefined for default constructor报错。😱</p>
<p>我在百度后才知道这是个小问题，为了让自己能长个记性我决定把这个问题写下来让自己能印象深刻。</p>
<p>解决方案：把java的类库加载进去，在工程上右键选择属性-&gt;Java Build Path的Libraries-&gt;Add Library选择JRE System Library-&gt;点击Next-&gt;选择Execution environment并选择jre版本或workspace default jre(有显示的版本不是都能选的的，只有默认自带的jre和安装绑定过的选了才能起作用)-&gt;点击Finish。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写给自己]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/ni-hao-ya/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/ni-hao-ya/">
        </link>
        <updated>2021-03-18T06:56:12.000Z</updated>
        <content type="html"><![CDATA[<p>我的名字叫张卓欣，现在是一名大二的软件工程专业的学生😀<br>
这是我的第一篇博客，希望我能坚持把我的学习经历在这里进行分享。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/hello-gridea/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>