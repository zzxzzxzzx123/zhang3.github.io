<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zzxzzxzzx123.github.io/zhang3.github.io/</id>
    <title>张卓欣的学习记录</title>
    <updated>2021-12-10T09:20:26.162Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zzxzzxzzx123.github.io/zhang3.github.io/"/>
    <link rel="self" href="https://zzxzzxzzx123.github.io/zhang3.github.io/atom.xml"/>
    <subtitle>学习使我快乐</subtitle>
    <logo>https://zzxzzxzzx123.github.io/zhang3.github.io/images/avatar.png</logo>
    <icon>https://zzxzzxzzx123.github.io/zhang3.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 张卓欣的学习记录</rights>
    <entry>
        <title type="html"><![CDATA[Android Studio 中多个module引用同一个jar（或者冲突解决）解决方案]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/android-studio-zhong-duo-ge-module-yin-yong-tong-yi-ge-jarhuo-zhe-chong-tu-jie-jue-jie-jue-fang-an/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/android-studio-zhong-duo-ge-module-yin-yong-tong-yi-ge-jarhuo-zhe-chong-tu-jie-jue-jie-jue-fang-an/">
        </link>
        <updated>2021-12-10T05:23:44.000Z</updated>
        <content type="html"><![CDATA[<p>在解决这些错误之前，让我们先了解下关于module的几种依赖方式的区别（直接看解决方案请跳过）</p>
<p>compile<br>
compile是对所有的build type以及favlors都会参与编译并且打包到最终的apk文件中。</p>
<p>Provided<br>
Provided是对所有的build type以及favlors只在编译时使用，类似eclipse中的external-libs,只参与编译，不打包到最终apk。</p>
<p>APK<br>
只会打包到apk文件中，而不参与编译，所以不能再代码中直接调用jar中的类或方法，否则在编译时会报错</p>
<p>Test compile<br>
Test compile 仅仅是针对单元测试代码的编译编译以及最终打包测试apk时有效，而对正常的debug或者<br>
release apk包不起作用。</p>
<p>Debug compile<br>
Debug compile 仅仅针对debug模式的编译和最终的debug apk打包</p>
<p>Release compile<br>
Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。</p>
<p>解决方法：<br>
1.第一个module不发生任何改变。<br>
2.设置另一个module引入jar的方式为Provided，这样改module引入的jar在编译时候可以使用，即代码不会报错，生成的apk不会包含该jar。在apk运行时候第一个module的jar会共享该module使用，也就是说compile依赖方式是对共所有的调用，虽然在编译时候不能被调用。（除了引用module的项目外）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 中 “1000==1000” 为 false，而 ”100==100“ 为 true]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/java-zhong-10001000-wei-falseer-100100-wei-true/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/java-zhong-10001000-wei-falseer-100100-wei-true/">
        </link>
        <updated>2021-12-10T04:30:27.000Z</updated>
        <content type="html"><![CDATA[<p>两个引用指向同一个对象，用<mark>表示它们是相等的。如果两个引用指向不同的对象，用</mark>表示它们是不相等的，即使它们的内容相同。</p>
<p>查看Integer.java 类，你会发现有一个内部私有类，IntegerCache.java，它缓存了从-128到127之间的所有的整数对象。</p>
<p>Integer c = 100;//手写代码    Integer i = Integer.valueOf(100);//编译器处理</p>
<p>public static Integer valueOf(int i) {<br>
if (i &gt;= IntegerCache.low &amp;&amp; i<br>
return IntegerCache.cache[i + (-IntegerCache.low)];<br>
return new Integer(i);<br>
}</p>
<p>如果值的范围在-128到127之间，它就从高速缓存返回实例。<br>
所以Integer c = 100, d = 100;指向了同一个对象。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP返回码]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/http-fan-hui-ma/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/http-fan-hui-ma/">
        </link>
        <updated>2021-12-10T04:25:59.000Z</updated>
        <content type="html"><![CDATA[<p>HTTP 是基于客户端/服务端（C/S）的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p>
<p>一、HTTP 超文本传输协议<br>
一个HTTP &quot;客户端&quot;是一个应用程序（Web浏览器或其他任何客户端），通过连接到服务器达到向服务器发送一个或多个HTTP的请求的目的。<br>
一个HTTP &quot;服务器&quot;同样也是一个应用程序（通常是一个Web服务，如Apache Web服务器或IIS服务器等），通过接收客户端的请求并向客户端发送HTTP响应数据。</p>
<p>HTTP 使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。<br>
HTTP 请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</p>
<p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。<br>
HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<p>二、HTTP 请求方式：<br>
GET     请求指定的页面信息，并返回实体主体。<br>
HEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>
POST    向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>
PUT     从客户端向服务器传送的数据取代指定的文档的内容。<br>
DELETE    请求服务器删除指定的页面。<br>
CONNECT    HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>
OPTIONS    允许客户端查看服务器的性能。<br>
TRACE    回显服务器收到的请求，主要用于测试或诊断。</p>
<p>三、HTTP 返回状态码<br>
1xx    处理信息，服务器收到请求，需要请求者继续执行操作；<br>
2xx    请求成功，操作被成功接收并处理；<br>
3xx    重定向，需要进一步的操作以完成请求；<br>
4xx    客户端错误，请求包含语法错误或无法完成请求；<br>
5xx    服务器错误，服务器在处理请求的过程中发生了错误；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个Android中事件分发的问题]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/yi-ge-android-zhong-shi-jian-fen-fa-de-wen-ti/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/yi-ge-android-zhong-shi-jian-fen-fa-de-wen-ti/">
        </link>
        <updated>2021-12-10T04:22:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images2015.cnblogs.com/blog/759818/201604/759818-20160411125425113-526042581.png" alt="img" loading="lazy"></figure>
<p>一个LinerLayout里放一个Button，当点击Button的时候事件是怎么传递的？</p>
<figure data-type="image" tabindex="2"><img src="https://images2015.cnblogs.com/blog/759818/201604/759818-20160411125425566-1337249448.png" alt="img" loading="lazy"></figure>
<p>点击事件用MotionEvent来表示，当点击事件发生时，最先传递给Activity，用Activity的dispatchTouchEvent来进行事件的派发，具体的工作是用Activity内部的Window来完成的。Window将事件传递个decor view，decor view一般是当前几面的底层容器（setContentView所设置的View的父容器，decor view是一个FrameLayout），通过Activity.getWindow().getDecorView()可以获得。现在，事件传递到decorView了，decorView再将事件传递给LinerLayout，LinerLayout将事件传递给Button。</p>
<p>这里要补充的是：当父容器通过 dispatchTouchEvent来传递事件时，如果他的onInterceptTouchEvent函数返回true，就不会将事件传递个子view，当然Android的还提供了一种防止父容器阻断事件的机制：只要子View调用requestDisallowInterceptTouchEvent方法，就能保证子View一定能收到点击事件。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾回收算法]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/la-ji-hui-shou-suan-fa/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/la-ji-hui-shou-suan-fa/">
        </link>
        <updated>2021-12-03T11:32:35.000Z</updated>
        <content type="html"><![CDATA[<p>标记—清除算法<br>
标记—清除算法是最基础的垃圾回收算法，后续的垃圾收集算法都是基于标记—清除算法进行改进而得到的。标记—清除算法分为“标记”和“清除”两个阶段，首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>
<p>标记—清除算法有两个主要缺点。一是效率问题，标记和清除的效率都不高，二是空间问题，标记清除之后会产生大量不连续的内存碎片，导致程序在之后的运行过程中无法为较大对象找到足够的连续内存。</p>
<p>复制算法<br>
官方解答：复制算法是将可用内存分成大小相等的两块，每次只使用其中的一块，当用完一块内存时，将还存活着的对象复制到另外一块内存，然后把已使用过的内存空间一次清理掉。</p>
<p>个人解释：主要原理将内存区域划分为a，b两部分，每次只使用其中的一块。当发生垃圾回收时，先将a部分中“存活”的对象复制到b部分，然后直接清除a部分内容。接着使用b部分进行对象存储。但是直接将可用内存分成两部分，可能造成内存区域分配不够或内存浪费问题。所以JVM使用Eden区和Servivor0、Servivor1区的划分方式，占比为8 1 1.每次JVM会使用Eden和一个Servivor区存储对象，然后再发生垃圾回收时，将存活的对象一次性复制到另一块Servivor区中，接着将Eden和使用过的Servivor区擦除<br>
一次性复制不满足时，就会启用逃生门，使用额外的内存区域去存储对象。</p>
<p>复制算法解决了效率问题。由于每次都是对整个半区进行内存回收，因此在内存分配时不需要考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可。复制算法的优点是实现简单，运行高效，缺点是将内存缩小为了原来的一半，以及在对象存活率较高时复制操作的次数较多，导致效率降低。复制时要遍历整个GCroots</p>
<p>标记—整理算法<br>
标记—整理算法是根据老年代的特点提出的。标记过程与标记—清除算法一样，但后续步骤不是直接回收被标记的对象，而是让所有存活的对象都向一端移动，然后清除边界以外的内存。</p>
<p>分代收集算法<br>
分代收集算法根据对象的存活周期不同将内存划分为多个区域，对每个区域选用不同的垃圾回收算法。</p>
<p>一般把 Java 堆分为新生代和老年代。在新生代中，大多数对象的生命周期都很短，因此选用复制算法。在老年代中，对象存活率高，因此选用标记—清除算法或标记—整理算法。</p>
<p>作者：力扣 (LeetCode)<br>
链接：https://leetcode-cn.com/leetbook/read/java-interview-highlights/en7epe/<br>
来源：力扣（LeetCode）<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android与互联网交互的三种方式]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/android-yu-hu-lian-wang-jiao-hu-de-san-chong-fang-shi/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/android-yu-hu-lian-wang-jiao-hu-de-san-chong-fang-shi/">
        </link>
        <updated>2021-12-02T04:24:52.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1638419606056.jpg" alt="" loading="lazy"></figure>
<p>Get和Post的对比<br>
用得最多的两个，当然要做下对比啦！<br>
<img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1638419616758.jpg" alt="" loading="lazy"><br>
GET：在请求的URL地址后以?的形式带上交给服务器的数据，多个数据之间以&amp;进行分隔， 但数据容量通常不能超过2K，比如:http://xxx?username=…&amp;pawd=…这种就是GET<br>
POST: 这个则可以在请求的实体内容中向服务器发送数据，传输没有数量限制<br>
另外要说一点，这两个玩意都是发送数据的，只是发送机制不一样，不要相信网上说的 &quot;GET获得服务器数据，POST向服务器发送数据&quot;!!另外GET安全性非常低，Post安全性较高， 但是执行效率却比Post方法好，一般查询的时候我们用GET，数据增删改的时候用POST！！</p>
<p>网络框架okhttp<br>
OkHttp 是一个默认高效的 HTTP 客户端：<br>
HTTP/2 支持允许对同一主机的所有请求共享一个套接字。<br>
连接池减少了请求延迟（如果 HTTP/2 不可用）。<br>
透明 GZIP 可缩小下载大小。<br>
响应缓存完全避免网络重复请求。</p>
<p>设置请求头<br>
Request request = new Request.Builder()<br>
.url(&quot;http://www.baidu.com&quot;)<br>
.header(&quot;User-Agent&quot;, &quot;OkHttp Headers.java&quot;)<br>
.addHeader(&quot;token&quot;, &quot;myToken&quot;)<br>
.build();</p>
<p>get同步请求<br>
public void getSyn(final String url) {<br>
new Thread(new Runnable() {<br>
@Override<br>
public void run() {<br>
try {<br>
//创建OkHttpClient对象<br>
OkHttpClient client = new OkHttpClient();<br>
//创建Request<br>
Request request = new Request.Builder()<br>
.url(url)//访问连接<br>
.get()<br>
.build();<br>
//创建Call对象<br>
Call call = client.newCall(request);<br>
//通过execute()方法获得请求响应的Response对象<br>
Response response = call.execute();<br>
if (response.isSuccessful()) {<br>
//处理网络请求的响应，处理UI需要在UI线程中处理<br>
//...<br>
}<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}).start();<br>
}</p>
<p>get异步请求<br>
public void getAsyn(String url) {<br>
OkHttpClient client = new OkHttpClient();<br>
Request request = new Request.Builder().url(url).build();<br>
Call call = client.newCall(request);<br>
call.enqueue(new Callback() {<br>
@Override<br>
public void onFailure(Call call, IOException e) {<br>
//...<br>
}</p>
<pre><code>    @Override
    public void onResponse(Call call, Response response) throws IOException {
        if(response.isSuccessful()){
            String result = response.body().string();
            //处理UI需要切换到UI线程处理
        }
    }
});
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android主题颜色问题]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/android-zhu-ti-yan-se-wen-ti/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/android-zhu-ti-yan-se-wen-ti/">
        </link>
        <updated>2021-10-19T12:09:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5C42516%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211019200943180.png" alt="image-20211019200943180" loading="lazy"></figure>
<p>Can't find ColorStateList from drawable resource ID #0x7f080085</p>
<p>解决方法</p>
<p>不能在 XML 中将 drawable 设置为 colorBackground</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[adb下载安装及使用]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/adb-xia-zai-an-zhuang-ji-shi-yong/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/adb-xia-zai-an-zhuang-ji-shi-yong/">
        </link>
        <updated>2021-06-11T13:50:48.000Z</updated>
        <content type="html"><![CDATA[<p>今天碰到这样的一道题<br>
adb 是在Android开发中经常使用的工具，其中从模拟器上拉取文件到本地电脑上使用的命令是（）</p>
<p>https://blog.csdn.net/weixin_43927138/article/details/90477966<br>
链接里的博客详细描述了Android开发中adb的使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java中== 和 equals()]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/java-zhong-he-equals/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/java-zhong-he-equals/">
        </link>
        <updated>2021-05-31T05:58:42.000Z</updated>
        <content type="html"><![CDATA[<p>执行下列程序的输出结果为（      ）<br>
public class Test {<br>
public static void main(String[] args) {<br>
String s1 = &quot;HelloWorld&quot;;<br>
String s2 = new String(&quot;HelloWorld&quot;);<br>
if (s1 == s2) {<br>
System.out.println(&quot;s1 == s2&quot;);<br>
} else {<br>
System.out.println(&quot;s1 != s2&quot;);<br>
}<br>
if (s1.equals(s2)) {<br>
System.out.println(&quot;s1 equals s2&quot;);<br>
} else {<br>
System.out.println(&quot;s1 not equals s2&quot;);<br>
}<br>
}<br>
}</p>
<p>正确答案为<br>
s1 != s2<br>
s1 equals s2<br>
“==”比较两个变量本身的值，即两个对象在内存中的首地址。<br>
“equals()”比较字符串中所包含的内容是否相同。</p>
<figure data-type="image" tabindex="1"><img src="https://zzxzzxzzx123.github.io/zhang3.github.io//post-images/1622440786573.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 var that = this 为什么在小程序出现这么频繁]]></title>
        <id>https://zzxzzxzzx123.github.io/zhang3.github.io/post/guan-yu-var-that-this-wei-shi-me-zai-xiao-cheng-xu-chu-xian-zhe-me-pin-fan/</id>
        <link href="https://zzxzzxzzx123.github.io/zhang3.github.io/post/guan-yu-var-that-this-wei-shi-me-zai-xiao-cheng-xu-chu-xian-zhe-me-pin-fan/">
        </link>
        <updated>2021-05-28T14:53:44.000Z</updated>
        <summary type="html"><![CDATA[<p>我在一个小程序项目中看到一个注释//var that=this很重要<br>
一开始我有点不明白，因为这样只是在this.setData变化中变成that.setData<br>
所以在出现问题后才去找了为什么</p>
]]></summary>
        <content type="html"><![CDATA[<p>我在一个小程序项目中看到一个注释//var that=this很重要<br>
一开始我有点不明白，因为这样只是在this.setData变化中变成that.setData<br>
所以在出现问题后才去找了为什么</p>
<!-- more -->
<p>https://blog.csdn.net/qq_37032151/article/details/81432732<br>
这篇博客讲的很好</p>
]]></content>
    </entry>
</feed>